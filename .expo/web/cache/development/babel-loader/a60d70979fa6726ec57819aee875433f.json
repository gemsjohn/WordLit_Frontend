{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Grid, Reveal } from \"./Grid\";\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache, useMutation, useQuery } from \"@apollo/client\";\nimport { setContext } from '@apollo/link-context';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nexport default function App() {\n  var GRAPHQL_API_URL = 'http://192.168.1.198:3001/graphql';\n  var asyncAuthLink = setContext(_asyncToGenerator(function* () {\n    return {\n      headers: {\n        Authorization: yield AsyncStorage.getItem('@storage_Key')\n      }\n    };\n  }));\n  var httpLink = new HttpLink({\n    uri: GRAPHQL_API_URL\n  });\n  var apolloClient = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: asyncAuthLink.concat(httpLink)\n  });\n  return _jsx(ApolloProvider, {\n    client: apolloClient,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: {\n          marginTop: 40,\n          alignItems: 'flex-start',\n          justifyContent: 'center',\n          flexDirection: 'row',\n          flexWrap: 'wrap'\n        },\n        children: _jsx(Grid, {})\n      }), _jsx(StatusBar, {\n        style: \"auto\"\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#7b2cbf'\n  }\n});","map":{"version":3,"names":["StatusBar","useEffect","useState","Grid","Reveal","ApolloProvider","ApolloClient","HttpLink","InMemoryCache","useMutation","useQuery","setContext","windowWidth","Dimensions","get","width","windowHeight","height","App","GRAPHQL_API_URL","asyncAuthLink","headers","Authorization","AsyncStorage","getItem","httpLink","uri","apolloClient","cache","link","concat","styles","container","marginTop","alignItems","justifyContent","flexDirection","flexWrap","StyleSheet","create","flex","backgroundColor"],"sources":["/Users/gemsjohn/Desktop/wordgame/Client/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Dimensions } from 'react-native';\nimport { Grid, Reveal } from './Grid';\n\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache, useMutation, useQuery } from \"@apollo/client\";\nimport { setContext } from '@apollo/link-context';\n\nconst windowWidth = Dimensions.get('window').width;\nconst windowHeight = Dimensions.get('window').height;\n\nexport default function App() {\n  \n  const GRAPHQL_API_URL = 'http://192.168.1.198:3001/graphql';\n  const asyncAuthLink = setContext(async () => {\n    return {\n      headers: {\n        Authorization: await AsyncStorage.getItem('@storage_Key'),\n      },\n    };\n  });\n\n\n  const httpLink = new HttpLink({\n    uri: GRAPHQL_API_URL,\n  });\n\n  const apolloClient = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: asyncAuthLink.concat(httpLink),\n  });\n\n  return (\n    <ApolloProvider client={apolloClient}>\n      <View style={styles.container}>\n        <View\n          style={{\n            marginTop: 40,\n            alignItems: 'flex-start',\n            justifyContent: 'center',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n          }}\n        >\n          <Grid />\n        </View>\n        {/* <View \n          style={{\n            position: 'absolute',\n            alignItems: 'center',\n            justifyContent: 'center',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n            top: windowHeight/3 + 3\n          }}\n        >\n          <Reveal />\n        </View> */}\n        <StatusBar style=\"auto\" />\n      </View>\n    </ApolloProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#7b2cbf',\n    // alignItems: 'center',\n    // justifyContent: 'center',\n  },\n});\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAE5C,SAASC,IAAI,EAAEC,MAAM;AAErB,SAASC,cAAc,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,WAAW,EAAEC,QAAQ,QAAQ,gBAAgB;AAC7G,SAASC,UAAU,QAAQ,sBAAsB;AAAC;AAAA;AAElD,IAAMC,WAAW,GAAGC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK;AAClD,IAAMC,YAAY,GAAGH,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACG,MAAM;AAEpD,eAAe,SAASC,GAAG,GAAG;EAE5B,IAAMC,eAAe,GAAG,mCAAmC;EAC3D,IAAMC,aAAa,GAAGT,UAAU,mBAAC,aAAY;IAC3C,OAAO;MACLU,OAAO,EAAE;QACPC,aAAa,QAAQC,YAAY,CAACC,OAAO,CAAC,cAAc;MAC1D;IACF,CAAC;EACH,CAAC,EAAC;EAGF,IAAMC,QAAQ,GAAG,IAAIlB,QAAQ,CAAC;IAC5BmB,GAAG,EAAEP;EACP,CAAC,CAAC;EAEF,IAAMQ,YAAY,GAAG,IAAIrB,YAAY,CAAC;IACpCsB,KAAK,EAAE,IAAIpB,aAAa,EAAE;IAC1BqB,IAAI,EAAET,aAAa,CAACU,MAAM,CAACL,QAAQ;EACrC,CAAC,CAAC;EAEF,OACE,KAAC,cAAc;IAAC,MAAM,EAAEE,YAAa;IAAA,UACnC,MAAC,IAAI;MAAC,KAAK,EAAEI,MAAM,CAACC,SAAU;MAAA,WAC5B,KAAC,IAAI;QACH,KAAK,EAAE;UACLC,SAAS,EAAE,EAAE;UACbC,UAAU,EAAE,YAAY;UACxBC,cAAc,EAAE,QAAQ;UACxBC,aAAa,EAAE,KAAK;UACpBC,QAAQ,EAAE;QACZ,CAAE;QAAA,UAEF,KAAC,IAAI;MAAG,EACH,EAaP,KAAC,SAAS;QAAC,KAAK,EAAC;MAAM,EAAG;IAAA;EACrB,EACQ;AAErB;AAEA,IAAMN,MAAM,GAAGO,UAAU,CAACC,MAAM,CAAC;EAC/BP,SAAS,EAAE;IACTQ,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE;EAGnB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}